(()=>{"use strict";(()=>{class e{constructor(e,t){this.emitter=e,this.controller=t}renderComponent(e,t,n,s){const l=document.createElement(e);return l.className=t,s&&(l.textContent=s),n&&Object.assign(l,n),l}}class t extends e{render(e){this.header=super.renderComponent("header","header");const t=super.renderComponent("h1","heading",{textContent:"CSS Selectors"}),n=super.renderComponent("nav","nav"),s=super.renderComponent("ul","nav__list list"),l=super.renderComponent("li","list__item"),o=super.renderComponent("li","list__item"),a=super.renderComponent("a","list__link list__link-tw",{href:"https://twitter.com/?lang=ru"}),r=super.renderComponent("a","list__link list__link-fb",{href:"https://www.facebook.com/"});e.append(this.header),this.header.append(t,n),n.append(s),s.append(l,o),o.append(a),l.append(r)}}class n extends e{render(e){this.main=super.renderComponent("div","content-box");const t=super.renderComponent("div","content-box");this.helper=super.renderComponent("button","help-button",{},"help me!"),this.subHeading=super.renderComponent("h2","sub-heading",{textContent:"Name of level"}),e.append(this.main),this.main.append(t),t.append(this.subHeading,this.helper),this.helper.addEventListener("click",this.onHelpCall),this.onLevelChange()}changeHeader(e){this.subHeading.textContent=e.doThis}onLevelChange(){this.emitter.subscribe("updateLevel",(e=>this.changeHeader(e)))}onHelpCall(){}}class s extends e{render(e){const t=super.renderComponent("div","perspective table-wrapper"),n=super.renderComponent("div","table-box");this.table=super.renderComponent("div","table"),this.tableTop=super.renderComponent("div","table-top");const s=super.renderComponent("div","table-bottom"),l=super.renderComponent("div","table-leg"),o=super.renderComponent("div","table-leg");e.append(t),t.append(n),n.append(this.table,this.tableTop),t.append(s),s.append(l,o),this.onLevelChange(),this.onLoseLevel(),this.onWinLevel()}showApple(e){this.tableTop.innerHTML="",this.tableTop.insertAdjacentHTML("afterbegin",e.boardMarkup),this.getTableElementsAnimation(e,"dance")}onLevelChange(){this.emitter.subscribe("updateLevel",(e=>this.showApple(e)))}onWinLevel(){this.emitter.subscribe("winLevel",(e=>this.getTableElementsAnimation(e,"clean")))}onLoseLevel(){this.emitter.subscribe("loseLevel",(e=>this.getTableElementsAnimation(e,"shake")))}getTableElementsAnimation(e,t){const n=[...document.querySelectorAll(`.table-top ${e.selector}`)];n&&n.forEach((e=>e.classList.add(`${t}`))),"shake"===t&&setTimeout((()=>{n.forEach((e=>e.classList.remove(`${t}`)))}),300),"clean"===t&&setTimeout((()=>{n.forEach((e=>e.classList.remove("dance")))}),300)}onHoverEditor(){this.emitter.subscribe("hoverEditor",(e=>this.showTable(e)))}showTable(e){"div"!==e&&console.log(e,e.toElement)}}class l extends e{render(e){this.editor=super.renderComponent("section","editor__wrapper"),this.editorCss=super.renderComponent("div","editor-css");const t=super.renderComponent("div","editor__heading"),n=super.renderComponent("span","editor__heading",{textContent:"CSS Editor"}),s=super.renderComponent("span","editor__lines-numbers"),l=super.renderComponent("pre","code",{textContent:"/*Type in a CSS selector*/"});this.textArea=super.renderComponent("textarea","editor__text-aria"),this.enterBtn=super.renderComponent("button","enter-button",{textContent:"Enter"}),this.editorHTML=super.renderComponent("div","viewer-css");const o=super.renderComponent("div","editor__heading"),a=super.renderComponent("span","editor__heading",{textContent:"HTML viewer"}),r=super.renderComponent("span","viewer__lines-numbers"),i=super.renderComponent("div","html-box");this.htmlCode=super.renderComponent("pre","html-code"),e.append(this.editor),this.editor.append(this.editorCss,this.editorHTML),this.editorCss.append(t,s,l,this.textArea,this.enterBtn),t.append(n),this.editorHTML.append(o,r,i),i.append(this.htmlCode),o.append(a),this.createLinesNumbers(s,r),this.enterBtn.addEventListener("click",(()=>{this.checkSelector(this.controller.currentLevel,this.textArea.value)})),this.textArea.addEventListener("keydown",(e=>{"Enter"===e.code&&(e.preventDefault(),this.checkSelector(this.controller.currentLevel,this.textArea.value))})),this.onLevelChange()}createLinesNumbers(e,t){Array(20).fill(0).map(((e,t)=>t+1)).forEach((n=>{e.insertAdjacentHTML("beforeend",`${n}<br>`),t.insertAdjacentHTML("beforeend",`${n}<br>`)}))}showCode(e){this.textArea.innerHTML="",this.htmlCode.innerHTML="",this.htmlCode.insertAdjacentText("afterbegin",`<div class = "table">\n${e.boardMarkup}\n</div>`)}onLevelChange(){this.emitter.subscribe("updateLevel",(e=>this.showCode(e)))}getTextAriaContent(){return console.log("textaria",this.textArea.value),this.textArea.value}checkSelector(e,t){console.log("check",e),console.log("check answer",t),e.selector!==t&&(console.log("LLLOOOOOOSSSEEEðŸ’¥"),this.emitter.emit("loseLevel",e)),e.selector===t&&(console.log("WWWWIIINNNNNðŸŽŠðŸŽŠðŸŽŠðŸŽŠðŸŽŠ"),this.controller.getCompletedLevels(e),this.textArea.value="",this.emitter.emit("winLevel",e))}}const o=[{id:0,helpTitle:"Select elements by their type",selectorName:"Type Selector",doThis:"Select the plates",selector:"plate",syntax:"A",help:"Selects all elements of type <strong>A</strong>. Type refers to the type of tag, so <tag>div</tag>, <tag>p</tag> and <tag>ul</tag> are all different element types.",examples:["<strong>div</strong> selects all <tag>div</tag> elements.","<strong>p</strong> selects all <tag>p</tag> elements."],boardMarkup:"\n    <plate></plate>\n    <plate></plate>\n    "},{id:1,doThis:"Select the bento boxes",selector:"bento",syntax:"A",helpTitle:"Select elements by their type",selectorName:"Type Selector",help:"Selects all elements of type <strong>A</strong>. Type refers to the type of tag, so <tag>div</tag>, <tag>p</tag> and <tag>ul</tag> are all different element types.",examples:["<strong>div</strong> selects all <tag>div</tag> elements.","<strong>p</strong> selects all <tag>p</tag> elements."],boardMarkup:"\n    <bento></bento>\n    <plate></plate>\n    <bento></bento>\n    "},{id:2,doThis:"Select the fancy plate",selector:"#fancy",selectorName:"ID Selector",helpTitle:"Select elements with an ID",syntax:"#id",help:"Selects the element with a specific <strong>id</strong>. You can also combine the ID selector with the type selector.",examples:['<strong>#cool</strong> selects any element with <strong>id="cool"</strong>','<strong>ul#long</strong> selects <tag>ul id="long"</tag>'],boardMarkup:'\n    <plate id="fancy"></plate>\n    <plate></plate>\n    <bento></bento>\n    '},{id:3,doThis:"Select the small apples",selector:".small",selectorName:"Class Selector",helpTitle:"Select elements by their class",syntax:".classname",help:"The class selector selects all elements with that class attribute. Elements can only have one ID, but many classes.",examples:['<strong>.neato</strong> selects all elements with <strong>class="neato"</strong>'],boardMarkup:'\n    <apple></apple>\n    <apple class="small"></apple>\n    <plate>\n      <apple class="small"></apple>\n    </plate>\n    <plate></plate>\n    '},{id:4,doThis:"Select the small oranges",selector:"orange.small",helpTitle:"Combine the Class Selector",syntax:"A.className",help:"You can combine the class selector with other selectors, like the type selector.",examples:['<strong>ul.important</strong> selects all <tag>ul</tag> elements that have <strong>class="important"</strong>','<strong>#big.wide</strong> selects all elements with <strong>id="big"</strong> that also have <strong>class="wide"</strong>'],boardMarkup:'\n    <apple></apple>\n    <apple class="small"></apple>\n    <bento>\n      <orange class="small"></orange>\n    </bento>\n    <plate>\n      <orange></orange>\n    </plate>\n    <plate>\n      <orange class="small"></orange>\n    </plate>'},{id:5,doThis:"Select the small oranges in the bentos",selector:"bento orange.small",syntax:"Put your back into it!",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <bento>\n      <orange></orange>\n    </bento>\n    <orange class="small"></orange>\n    <bento>\n      <orange class="small"></orange>\n    </bento>\n    <bento>\n      <apple class="small"></apple>\n    </bento>\n    <bento>\n      <orange class="small"></orange>\n    </bento>\n    '},{id:6,doThis:"Select all the plates and bentos",selector:"plate,bento",selectorName:"Comma Combinator",helpTitle:"Combine, selectors, with... commas!",syntax:"A, B",help:"Thanks to Shatner technology, this selects all <strong>A</strong> and <strong>B</strong> elements. You can combine any selectors this way, and you can specify more than two.",examples:['<strong>p, .fun</strong> selects all <tag>p</tag> elements as well as all elements with <strong>class="fun"</strong>',"<strong>a, p, div</strong> selects all <tag>a</tag>, <tag>p</tag> and <tag>div</tag> elements"],boardMarkup:"\n    <pickle></pickle>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    <bento>\n      <pickle></pickle>\n    </bento>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    <pickle></pickle>\n    "},{id:7,doThis:"Select all the things!",selector:"*",selectorName:"The Universal Selector",helpTitle:"You can select everything!",syntax:"*",help:"You can select all elements with the universal selector! ",examples:["<strong>p *</strong> selects any element inside all <tag>p</tag> elements."],boardMarkup:'\n    <apple></apple>\n    <plate>\n      <orange class="small"></orange>\n    </plate>\n    <bento></bento>\n    <bento>\n      <orange></orange>\n    </bento>\n    '},{id:8,selectorName:"First Child Pseudo-selector",helpTitle:"Select a first child element inside of another element",doThis:"Select the top orange",selector:"plate :first-child",syntax:":first-child",help:"You can select the first child element. A child element is any element that is directly nested in another element. You can combine this pseudo-selector with other selectors.",examples:["<strong>:first-child</strong> selects all first child elements.","<strong>p:first-child</strong> selects all first child <tag>p</tag> elements.","<strong>div p:first-child</strong> selects all first child <tag>p</tag> elements that are in a <tag>div</tag>."],boardMarkup:'\n    <bento></bento>\n    <plate></plate>\n    <plate>\n      <orange></orange>\n      <orange></orange>\n      <orange></orange>\n    </plate>\n    <pickle class="small"></pickle>'},{id:9,selectorName:"General Sibling Selector",helpTitle:"Select elements that follows another element",syntax:"A ~ B",doThis:"Select the pickles beside the bento",selector:"bento ~ pickle",help:"You can select all siblings of an element that follow it. This is like the Adjacent Selector (A + B) except it gets all of the following elements instead of one.",examples:["<strong>A ~ B</strong> selects all <strong>B</strong> that follow a <strong>A</strong>"],boardMarkup:'\n    <pickle></pickle>\n    <bento>\n      <orange class="small"></orange>\n    </bento>\n    <pickle class="small"></pickle>\n    <pickle></pickle>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    <plate>\n      <pickle class="small"></pickle>\n    </plate>\n    '},{id:10,selectorName:"Nth of Type Selector",doThis:"Select all even plates",selector:"plate:nth-of-type(even)",syntax:":nth-of-type(A)",help:"Selects a specific element based on its type and order in another element - or even or odd instances of that element.",examples:["<strong>div:nth-of-type(2)</strong> selects the second instance of a div.","<strong>.example:nth-of-type(odd)</strong> selects all odd instances of a the example class."],boardMarkup:"\n    <plate></plate>\n    <plate></plate>\n    <plate></plate>\n    <plate></plate>\n    "},{id:11,selectorName:"Only of Type Selector",helpTitle:"Select elements that are the only ones of their type within of their parent element",selector:"apple:only-of-type",syntax:":only-of-type",doThis:"Select the apple on the middle plate",help:"Selects the only element of its type within another element.",examples:["<strong>p span:only-of-type</strong> selects a <tag>span</tag> within any <tag>p</tag> if it is the only <tag>span</tag> in there."],boardMarkup:'\n    <plate id="fancy">\n      <apple class="small"></apple>\n      <apple></apple>\n    </plate>\n    <plate>\n      <apple class="small"></apple>\n    </plate>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    '},{id:12,selectorName:"Empty Selector",helpTitle:"Select elements that don't have children",doThis:"Select the empty bentos",selector:"bento:empty",syntax:":empty",help:"Selects elements that don't have any other elements inside of them.",examples:["<strong>div:empty</strong> selects all empty <tag>div</tag> elements."],boardMarkup:'\n    <bento></bento>\n    <bento>\n      <pickle class="small"></pickle>\n    </bento>\n    <plate></plate>\n    <bento></bento>'}];class a extends e{constructor(){super(...arguments),this.arrLevels=[]}render(e){this.aside=super.renderComponent("aside","levels-of-game__wrapper");const t=super.renderComponent("h2","sub-heading",{textContent:"Choose a level"});this.levelsList=super.renderComponent("ul","levels-list"),e.append(this.aside),this.aside.append(t,this.levelsList),this.addLevels(o,this.levelsList),this.levelsList.addEventListener("click",this.getDataLevel.bind(this)),this.onWinLevel()}addLevels(e,t){e.forEach(((e,n)=>{const s=super.renderComponent("span","levels-number",{textContent:String(Number(n+1))}),l=super.renderComponent("span","checkmark"),o=super.renderComponent("a","levels__link",{textContent:e.syntax});this.levelName=super.renderComponent("li","levels-list__name",{id:String(n)}),t.append(this.levelName),this.levelName.append(l,s,o),this.arrLevels.push(this.levelName)}))}getHeading(e){return o[e].doThis}getMarkupEditor(e){return o[e].boardMarkup}getSelector(e){return o[e].selector}getDataLevel(e){const t=e.target.closest(".levels-list__name");return this.levelID=+t.getAttribute("id"),this.onLevelChange(o[this.levelID]),t.classList.add("active"),console.log(o[this.levelID].id),this.controller.upDatelevel(o[this.levelID]),o[this.levelID]}onLevelChange(e){this.emitter.emit("updateLevel",e),this.arrLevels.forEach((e=>{e.classList.contains("active")&&e.classList.remove("active")}))}onWinLevel(){this.emitter.subscribe("winLevel",(e=>this.addCompletedClass(e))),this.levelID<o.length-1&&(this.levelID+=1)}addCompletedClass(e){document.getElementById(String(e.id)).classList.add("completed")}}class r extends e{render(e){this.footer=super.renderComponent("footer","footer");const t=super.renderComponent("div","footer__content-wrappter"),n=super.renderComponent("div","footer__text-wrappter"),s=super.renderComponent("a","footer__link",{textContent:"CSS Diner clone",href:"https://flukeout.github.io/"}),l=super.renderComponent("span","text-content",{textContent:" is made by "}),o=super.renderComponent("a","footer__link",{textContent:"MaleryValery",href:"https://github.com/MaleryValery"}),a=super.renderComponent("span","footer__year",{textContent:`${(new Date).getFullYear()}`}),r=super.renderComponent("a","footer__link-scholl",{href:"https://rs.school/js/"}),i=super.renderComponent("a","footer__link-github",{href:"https://flukeout.github.io/"});e.append(this.footer),this.footer.append(t),n.append(s,l,o,a),t.append(r,n,i)}}class i{constructor(){this.events={}}subscribe(e,t){this.events[e]||(this.events[e]=[]),this.events[e].push(t),console.log(this.events)}unsubscribe(e,t){this.events[e]=this.events[e].filter((e=>t!==e))}emit(e,t){const n=this.events[e];n&&n.forEach((e=>e.call(this,t)))}}class p{constructor(){this.complitedLevels=[],this.eventEmitter=new i}upDatelevel(e){return this.currentLevel=o.find((t=>t.id===e.id)),console.log("controller",this.currentLevel),this.currentLevel}getCompletedLevels(e){return this.complitedLevels.push(e),this.complitedLevels}}(new class{constructor(){this.emitter=new i,this.controller=new p,this.header=new t,this.main=new n(this.emitter,this.controller),this.table=new s(this.emitter,this.controller),this.editor=new l(this.emitter,this.controller),this.aside=new a(this.emitter,this.controller),this.footer=new r,this.currentLevel=0}render(){const e=document.createElement("div"),t=document.createElement("div");t.classList.add("game-field__wrapper"),e.classList.add("wrapper"),document.body.append(e),e.append(t),this.header.render(t),this.main.render(t),this.table.render(this.main.main),this.editor.render(this.main.main),this.footer.render(t),this.aside.render(e)}chooseLevel(e){const t=document.querySelector(".sub-heading"),n=document.querySelector(".html-code"),s=e.target,l=document.querySelector(".table-top"),o=s.closest(".levels-list__name");if(l.innerHTML="",n.innerHTML="",o){document.querySelectorAll(".levels-list__name").forEach((e=>{e.classList.contains("active")&&e.classList.remove("active")}));const e=+o.id;this.currentLevel=e,o.classList.add("active"),t.textContent=this.aside.getHeading(this.currentLevel),l.insertAdjacentHTML("afterbegin",`${this.aside.getMarkupEditor(this.currentLevel)}`),n.insertAdjacentText("afterbegin",`<div class="table">${this.aside.getMarkupEditor(this.currentLevel)}\n</div>`)}}}).render()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,